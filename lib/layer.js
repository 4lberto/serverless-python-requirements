const BbPromise = require('bluebird');
const fse = require('fs-extra');
const path = require('path');
const JSZip = require('jszip');
const {
  writeZip,
  addTree
} = require('./zipTree');

BbPromise.promisifyAll(fse);

/**
 * Get the paths for the compatible runtimes of the layer
 * @param {string[]} list of runtime paths
 */
function getRunTimeBuildPaths() {
  const runtimepaths = {
    'python2.7': 'python',
    'python3.6': path.join('python', 'lib', 'python3.6', 'site-packages'),
    'python3.7': path.join('python', 'lib', 'python3.7', 'site-packages'),
  };

  let runtimes = []

  // Defer to Layer config first
  if (this.options.layer.compatibleRuntimes) {
    runtimes = this.options.layer.compatibleRuntimes;
    // If none provided, assume the provider runtime
  } else if (this.serverless.service.provider.runtime) {
    runtimes = [this.serverless.service.provider.runtime];
    // If still no runtime found, just assume latest python
  } else {
    runtimes = ['python3.7'];
  }

  return BbPromise.resolve(runtimes.map(runtime => runtimepaths[runtime]));
}

/**
 * Zip up requirements to be used as layer package.
 * @param {string[]} list of paths where the requirements should be put in the layer
 * @return {Promise} the JSZip object constructed.
 */
function zipRequirements(runtimepaths) {
  const rootZip = new JSZip();
  const src = path.join('.serverless', 'requirements')

  return BbPromise.each(runtimepaths, (runtimepath) => addTree(rootZip.folder(runtimepath), src))
    .then(() => writeZip(rootZip, path.join('.serverless', 'pythonRequirementsLayer.zip')))
}

/**
 * Creates a layer on the serverless service for the requirements zip.
 * @return {Promise} empty promise
 */
function createLayers() {
  this.serverless.service.layers['pythonRequirements'] = Object.assign({
      artifact: path.join('.serverless', 'pythonRequirements.zip'),
      name: `${this.serverless.service.stage}-python-requirements`,
      description: 'Python requirements generated by serverless-python-requirements.'
    },
    this.options.layer
  );

  return BbPromise.resolve();
}

/**
 * Creates a layer from the installed requirements.
 * @return {Promise} the combined promise for requirements layer.
 */
function layerRequirements() {
  if (!this.options.layer) {
    return BbPromise.resolve();
  }

  this.serverless.cli.log('Packaging Python Requirements Lambda Layer...');

  return BbPromise.bind(this)
    .then(getRunTimeBuildPaths)
    .then(zipRequirements)
    .then(createLayers);
}

module.exports = {
  layerRequirements
};
